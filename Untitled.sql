SHOW DATABASES;
USE Dev;

CREATE TABLE studies (PNAME varchar(20), INSTITUTE varchar(20), COURSE varchar(20), COURSE_FEE int );
SELECT * FROM studies;

INSERT INTO studies values
('ANAND','SABHARI','PGDCA',4500 ),
('ALTAF','COIT','DCA',7200 ),
('JULIANA','BDPS','MCA',22000 ),
('KAMALA','PRAGATHI','DCA',5000 ),
('MARY','SABHARI','PGDCA ',4500 ),
('NELSON','PRAGATHI','DAP',6200 ),
('PATRICK','PRAGATHI','DCAP',5200 ),
('QADIR','APPLE','HDCA',14000 ),
('RAMESH','SABHARI','PGDCA',4500 ),
('REBECCA','BRILLIANT','DCAP',11000 ),
('REMITHA','BDPS','DCS',6000),
('REVATHI','SABHARI','DAP',5000 ),
('VIJAYA','BDPS','DCA',48000);

SELECT * FROM studies;

CREATE TABLE software (PNAME varchar(20), TITLE varchar(20), DEVELOPIN varchar(20), SCOST decimal(10,2),  DCOST int, SOLD int);

SHOW tables;

SELECT*FROM software;

INSERT INTO software values
('MARY','README','CPP',300, 1200, 84), 
('ANAND','PARACHUTES','BASIC',399.95, 6000, 43 ),
('ANAND','VIDEO TITLING','PASCAL',7500, 16000, 9 ),
('JULIANA','INVENTORY','COBOL',3000, 3500, 0 ),
('KAMALA','PAYROLL PKG.','DBASE',9000, 20000, 7),
('MARY','FINANCIAL ACCT.','ORACLE',18000, 85000, 4), 
('MARY','CODE GENERATOR','C',4500, 20000, 23),
('PATTRICK','README','CPP',300, 1200, 84),
('QADIR','BOMBS AWAY','ASSEMBLY',750, 3000, 11 ),
('QADIR','VACCINES','C',1900, 3100, 21 ),
('RAMESH','HOTEL MGMT.','DBASE',13000, 35000, 4),
('RAMESH','DEAD LEE','PASCAL',599.95, 4500, 73 ),
('REMITHA','PC UTILITIES','C',725, 5000, 51 ),
('REMITHA','TSR HELP PKG.','ASSEMBLY',2500, 6000, 7 ),
('REVATHI','HOSPITAL MGMT.','PASCAL',1100, 75000, 2 ),
('VIJAYA','TSR EDITOR','C',900, 700, 6);

CREATE TABLE programmer (PNAME varchar(20), DOB date, DOJ date, GENDER varchar(2), PROF1 varchar(20), PROF2 varchar(20), SALARY int);

SELECT*FROM programmer;

INSERT INTO programmer values
('ANAND', STR_TO_DATE('12-Apr-66', '%d-%b-%y'), STR_TO_DATE('21-Apr-92', '%d-%b-%y'), 'M', 'PASCAL', 'BASIC', 3200),
('ALTAF', STR_TO_DATE('02-Jul-64', '%d-%b-%y'), STR_TO_DATE('13-Nov-90', '%d-%b-%y'), 'M', 'CLIPPER', 'COBOL', 2800),
('JULIANA', STR_TO_DATE('31-Jan-60', '%d-%b-%y'), STR_TO_DATE('21-Apr-90', '%d-%b-%y'), 'F', 'COBOL', 'DBASE', 3000),
('KAMALA', STR_TO_DATE('30-Oct-68', '%d-%b-%y'), STR_TO_DATE('02-Jan-92', '%d-%b-%y'), 'F', 'C', 'DBASE', 2900),
('MARY', STR_TO_DATE('24-Jun-70', '%d-%b-%y'), STR_TO_DATE('01-Feb-91', '%d-%b-%y'), 'F', 'CPP', 'ORACLE', 4500),
('NELSON', STR_TO_DATE('11-Sep-85', '%d-%b-%y'), STR_TO_DATE('11-Oct-89', '%d-%b-%y'), 'M', 'COBOL', 'DBASE', 2500),
('PATTRICK', STR_TO_DATE('10-Nov-65', '%d-%b-%y'), STR_TO_DATE('21-Apr-90', '%d-%b-%y'), 'M', 'PASCAL', 'CLIPPER', 2800),
('QADIR', STR_TO_DATE('31-Aug-65', '%d-%b-%y'), STR_TO_DATE('21-Apr-91', '%d-%b-%y'), 'M', 'ASSEMBLY', 'C', 3000),
('RAMESH', STR_TO_DATE('03-May-67', '%d-%b-%y'), STR_TO_DATE('28-Feb-91', '%d-%b-%y'), 'M', 'PASCAL', 'DBASE', 3200),
('REBECCA', STR_TO_DATE('01-Jan-67', '%d-%b-%y'), STR_TO_DATE('01-Dec-90', '%d-%b-%y'), 'F', 'BASIC', 'COBOL', 2500),
('REMITHA', STR_TO_DATE('19-Apr-70', '%d-%b-%y'), STR_TO_DATE('20-Apr-93', '%d-%b-%y'), 'F', 'C', 'ASSEMBLY', 3600),
('REVATHI', STR_TO_DATE('02-Dec-69', '%d-%b-%y'), STR_TO_DATE('02-Jan-92', '%d-%b-%y'), 'F', 'PASCAL', 'BASIC', 3700),
('VIJAYA', STR_TO_DATE('14-Dec-65', '%d-%b-%y'), STR_TO_DATE('02-May-92', '%d-%b-%y'), 'F', 'FOXPRO', 'C', 3500);

SELECT AVG(SCOST) FROM software WHERE DEVELOPIN = "PASCAL";
SELECT PNAME, curdate()-DOB  AS AGE FROM programmer;
SELECT PNAME, TIMESTAMPDIFF(year,curdate(),DOB) AS Age FROM Programmer;


SELECT PNAME FROM studies WHERE COURSE = "DAP";

SELECT PNAME,DOB FROM programmer WHERE MONTH(DOB) = 01;  

SELECT PNAME, MAX(SOLD) FROM software GROUP BY PNAME;

SELECT COURSE, MIN(COURSE_FEE) FROM studies GROUP BY COURSE;

SELECT COUNT(PNAME) AS count FROM studies WHERE COURSE = "PGDCA";


SELECT DEVELOPIN, SCOST,SOLD FROM software WHERE DEVELOPIN = "C";
SELECT SUM(SCOST * SOLD) AS Revenue FROM software WHERE DEVELOPIN = "C";

SELECT * FROM software WHERE PNAME = "RAMESH";

SELECT COUNT(PNAME) AS count FROM studies WHERE INSTITUTE = "SABHARI";
SELECT * FROM studies WHERE INSTITUTE = "SABHARI";


USE Dev;
SELECT * FROM software WHERE SCOST >= DCOST;

SELECT MAX(DCOST) FROM software WHERE DEVELOPIN = "BASIC";

SELECT COUNT(DEVELOPIN) FROM software WHERE DEVELOPIN = "DBASE";

SELECT COUNT(INSTITUTE) FROM studies WHERE INSTITUTE = "Pragathi";

SELECT COUNT(PNAME) FROM studies WHERE COURSE_FEE BETWEEN 5000 AND 10000;

SELECT AVG(COURSE_FEE) FROM studies;

SELECT*FROM programmer WHERE PROF1 = "C" OR PROF2 = "C";

SELECT*FROM programmer WHERE PROF1 = "COBOL" OR PROF2 = "PASCAL" OR PROF1 = "PASCAL" OR PROF2 = "COBOL";

SELECT*FROM programmer WHERE NOT  PROF1 = "Pascal" OR PROF2 = "C" OR PROF1 = "C" OR PROF2 = "Pascal";

SELECT MAX(TIMESTAMPDIFF(year,DOB,curdate())) AS MaxAge FROM Programmer WHERE GENDER = "M";

SELECT AVG(TIMESTAMPDIFF(year,DOB,curdate())) AS AvgAge FROM Programmer WHERE GENDER = "F";


SELECT PNAME  FROM Programmer WHERE MONTH(curdate()) = MONTH(DOB);

SELECT COUNT(PNAME) FROM Programmer WHERE GENDER = "F";

SELECT PNAME, PROF1,PROF2 FROM Programmer WHERE GENDER = "M";
 
SELECT AVG(SALARY) FROM Programmer;

SELECT PNAME FROM Programmer WHERE SALARY BETWEEN 2000 AND 4000;

SELECT COUNT(PNAME) FROM Programmer WHERE SALARY BETWEEN 2000 AND 4000;


SELECT*FROM programmer WHERE NOT  PROF1 = "CLIPPER" OR PROF2 = "COBOL" OR PROF1 = "COBOL" OR PROF2 = "CLIPPER" OR PROF1 = "PASCAL" OR PROF2 = "PASCAL";

SELECT PNAME, DCOST FROM software;

SELECT PNAME, SCOST FROM software;

SELECT PNAME, SOLD FROM software;

SELECT DEVELOPIN, SCOST FROM software;

SELECT DEVELOPIN,AVG(DCOST), AVG(SCOST), SUM(SCOST*SOLD)/SUM(SOLD) FROM software GROUP BY DEVELOPIN;

SELECT PNAME,MAX(DCOST),MIN(DCOST) FROM software GROUP BY PNAME;

SELECT INSTITUTE,COUNT(COURSE),AVG(COURSE_FEE) FROM studies GROUP BY INSTITUTE;

SELECT INSTITUTE,COUNT(*) FROM studies GROUP BY INSTITUTE;

SELECT PNAME,GENDER FROM programmer;

SELECT PNAME,TITLE FROM software;

SELECT DEVELOPIN,COUNT(*) FROM software WHERE NOT DEVELOPIN = "C" OR DEVELOPIN ="C++" GROUP BY DEVELOPIN;

SELECT DEVELOPIN,COUNT(*) FROM software WHERE DCOST <1000 GROUP BY DEVELOPIN;

SELECT AVG(DCOST-SCOST) AS AvgDiff FROM software GROUP BY SCOST;

SELECT MAX(SALARY),MIN(SALARY),AVG(SALARY) FROM programmer WHERE SALARY>2000;

SELECT PNAME FROM programmer WHERE SALARY = (SELECT MAX(SALARY) FROM programmer WHERE (PROF1 = "C" OR PROF2 = "C"));

SELECT PNAME FROM programmer WHERE GENDER = "F" AND SALARY = (SELECT MAX(SALARY) FROM programmer WHERE (PROF1 = "COBOL" OR PROF2 = "COBOL"));


SELECT PNAME FROM programmer WHERE DOJ = (SELECT MAX(DOJ) FROM programmer);

SELECT PNAME FROM programmer WHERE DATE(DOJ) = (SELECT DATE(MIN(DOJ)) FROM programmer WHERE GENDER = 'M' AND (PROF1 = 'PASCAL' OR PROF2 = 'PASCAL')) AND GENDER = "M" AND (PROF1 = "PASCAL" OR PROF2 = "PASCAL");

SELECT PNAME FROM programmer WHERE DATE(DOB) = (SELECT DATE(MIN(DOB)) FROM programmer WHERE PROF1 = "DBASE" OR PROF2 = "DBASE") AND (PROF1 = "DBASE" OR PROF2 = "DBASE"); 

SELECT PNAME FROM programmer WHERE SALARY IN (SELECT SALARY FROM programmer WHERE SALARY>3000 AND GENDER = "F" AND PROF1 NOT IN ("C","C++","ORACLE","DBASE") AND PROF2 NOT IN ("C","C++","ORACLE","DBASE")); 

SELECT INSTITUTE,COUNT(*) AS std FROM studies GROUP BY INSTITUTE ORDER  BY std DESC LIMIT 1;

SELECT COURSE,MAX(COURSE_FEE) as cnt FROM studies GROUP BY COURSE ORDER BY cnt DESC;

SELECT COURSE,COUNT(*) AS cnt FROM studies GROUP BY COURSE ORDER BY cnt DESC LIMIT 1;

SELECT INSTITUTE FROM studies WHERE COURSE = "DCA";

SELECT INSTITUTE, COURSE FROM studies WHERE COURSE_FEE<(SELECT AVG(COURSE_FEE) FROM studies);

SELECT COURSE FROM studies WHERE COURSE_FEE BETWEEN (SELECT AVG(COURSE_FEE) FROM studies)- 1000 AND  (SELECT AVG(COURSE_FEE) FROM studies) + 1000;

SELECT TITLE FROM software WHERE DCOST = (SELECT MAX(DCOST) FROM software);

SELECT TITLE FROM software WHERE SCOST = (SELECT MIN(SCOST) FROM software);

SELECT PNAME FROM software WHERE SOLD = (SELECT MIN(SOLD) FROM software);

SELECT DEVELOPIN FROM software WHERE SCOST*SOLD = (SELECT MAX(SCOST*SOLD) FROM software);

SELECT SOLD FROM software WHERE DCOST-SCOST = (SELECT MIN(DCOST-SCOST) FROM software);

SELECT TITLE FROM software WHERE DCOST = (SELECT MAX(DCOST) FROM software WHERE DEVELOPIN = "PASCAL") AND DEVELOPIN = "PASCAL";

SELECT DEVELOPIN,COUNT(*) AS cnt FROM software GROUP BY DEVELOPIN ORDER BY cnt DESC LIMIT 1;

SELECT PNAME,TITLE,SCOST*SOLD as Total FROM software GROUP BY TITLE ORDER BY Total DESC LIMIT 1;

SELECT TITLE FROM software WHERE SOLD<(SELECT AVG(SOLD) FROM software);

SELECT PNAME,TITLE FROM software WHERE (SOLD*SCOST) >= DCOST*2;

SELECT s.PNAME,s.TITLE,s.DCOST,s.DEVELOPIN FROM software  s JOIN (SELECT PNAME,DEVELOPIN,MIN(DCOST) As min FROM software GROUP BY PNAME,DEVELOPIN) AS sub ON sub.PNAME = s.PNAME AND s.DEVELOPIN = sub.DEVELOPIN AND s.DCOST=sub.min;

SELECT DEVELOPIN FROM software WHERE SOLD = (SELECT MAX(SOLD) FROM software) OR  SOLD =  (SELECT MIN(SOLD) FROM software);

SELECT PNAME,DOB FROM programmer WHERE YEAR(DOB) = 1965 AND DOB = (SELECT MAX(DOB) FROM programmer WHERE YEAR(DOB) = 1965);

SELECT PNAME,DOB FROM programmer WHERE DOB = (SELECT MIN(DOB) FROM programmer WHERE YEAR(DOB) = 1992 AND GENDER = "F") AND YEAR(DOB) = 1992 AND GENDER = "F";

SELECT YEAR(DOB) AS BYEAR FROM programmer GROUP BY YEAR(DOB) ORDER BY COUNT(*) DESC LIMIT 1;

SELECT MONTH(DOJ) FROM programmer GROUP BY MONTH(DOJ) ORDER BY COUNT(*) DESC LIMIT 1;

SELECT LANG,COUNT(*) AS tot FROM(SELECT PROF1 As LANG FROM programmer UNION ALL SELECT PROF2 FROM programmer) AS AllLang GROUP BY LANG ORDER BY tot DESC LIMIT 1;

SELECT PNAME,SALARY FROM programmer WHERE SALARY < (SELECT AVG(SALARY) FROM programmer WHERE GENDER = "F") AND GENDER = "M";

SELECT PNAME,SALARY FROM programmer WHERE SALARY>(SELECT MAX(SALARY) FROM programmer) AND GENDER = "F";

SELECT PROF1,COUNT(*) AS cnt FROM programmer GROUP BY PROF1 ORDER BY cnt DESC LIMIT 1;

SELECT * FROM programmer WHERE SALARY IN (SELECT SALARY FROM programmer GROUP BY SAlARY HAVING COUNT(*)>1) ORDER BY SALARY;

SELECT programmer.PNAME,software.TITLE FROM software INNER JOIN programmer ON programmer.PNAME=software.PNAME WHERE programmer.SALARY>3000;

SELECT programmer.PNAME,software.TITLE,software.DEVELOPIN FROM software INNER JOIN programmer ON programmer.PNAME= software.PNAME WHERE programmer.GENDER = "F" AND software.DEVELOPIN = "PASCAL";

SELECT*FROM programmer WHERE  (DOJ < '1990-01-01');

SELECT programmer.PNAME,software.TITLE,software.SOLD FROM software INNER JOIN programmer ON programmer.PNAME = software.PNAME INNER JOIN studies ON studies.PNAME = software.PNAME WHERE programmer.GENDER = "F" AND studies.INSTITUTE = "Pragathi";

SELECT s.INSTITUTE,COUNT(DISTINCT sw.TITLE), SUM(sw.SOLD),SUM(sw.SCOST * sw.SOLD) FROM studies s JOIN programmer p ON s.PNAME = p.PNAME JOIN software sw ON p.PNAME = sw.PNAME GROUP BY s.INSTITUTE;

SELECT software.PNAME,software.TITLE,software.SOLD FROM Software INNER JOIN studies ON studies.PNAME = software.PNAME INNER JOIN programmer ON programmer.PNAME = software.PNAME WHERE studies.INSTITUTE = (SELECT INSTITUTE AS CNT FROM studies GROUP BY INSTITUTE ORDER BY COUNT(*) DESC LIMIT 1) AND programmer.GENDER = "M";

SELECT software.PNAME,software.TITLE,software.SOLD FROM Software INNER JOIN programmer ON programmer.PNAME = software.PNAME WHERE (programmer.GENDER = "M" AND programmer.DOB < '1965-01-01') OR (programmer.GENDER = "F" AND programmer.DOB > '1975-01-01');

SELECT software.* FROM software INNER JOIN programmer ON programmer.PNAME = software.PNAME WHERE software.DEVELOPIN NOT IN (programmer.PROF1,programmer.PROF2);

SELECT software.* FROM software INNER JOIN studies ON studies.PNAME = software.PNAME INNER JOIN programmer ON programmer.PNAME = software.PNAME WHERE studies.INSTITUTE = "Sabhari" AND programmer.GENDER = "M";

SELECT PNAME FROM software WHERE PNAME NOT IN (SELECT DISTINCT PNAME FROM software);

SELECT SUM(software.SCOST) FROM software INNER JOIN studies ON studies.PNAME = software.PNAME WHERE studies.INSTITUTE="Apple";

SELECT PNAME,DOJ FROM programmer WHERE DOJ IN (SELECT DOJ FROM programmer GROUP BY DOJ HAVING COUNT(*)>1); 

SELECT PNAME,PROF2 FROM programmer WHERE PROF2 IN (SELECT PROF2 FROM programmer GROUP BY PROF2 HAVING COUNT(*)>1);

SELECT studies.INSTITUTE,SUM(software.SCOST*software.DCOST) FROM studies JOIN software ON studies.PNAME = software.PNAME GROUP BY studies.INSTITUTE;

SELECT software.PNAME,studies.INSTITUTE, software.DCOST FROM studies JOIN software ON studies.PNAME = software.PNAME WHERE software.DCOST = (SELECT MAX(DCOST) FROM software);

SELECT DISTINCT LANG FROM ( SELECT PROF1 AS LANG FROM programmer UNION SELECT PROF2 AS LANG FROM programmer)AS lang_list WHERE LANG NOT IN(SELECT DISTINCT DEVELOPIN FROM software);

SELECT programmer.PNAME, programmer.SALARY,studies.INSTITUTE FROM programmer JOIN software ON programmer.PNAME = software.PNAME JOIN studies ON programmer.PNAME = studies.PNAME WHERE software.SCOST = (SELECT MAX(SCOST) FROM software);

SELECT programmer.PNAME, AVG(programmer.SALARY) FROM programmer JOIN software ON programmer.PNAME = software.PNAME WHERE software.SOLD*software.SCOST >50000 GROUP BY programmer.PNAME;

SELECT COUNT(software.TITLE) FROM software JOIN studies ON software.PNAME = studies.PNAME WHERE studies.COURSE_FEE = (SELECT MIN(COURSE_FEE) FROM studies);

SELECT studies.PNAME,COUNT(software.TITLE),studies.INSTITUTE FROM software JOIN studies ON software.PNAME = studies.PNAME WHERE software.DCOST = (SELECT MIN(DCOST) FROM software) GROUP BY studies.PNAME,studies.INSTITUTE;

SELECT COUNT(software.TITLE) FROM software JOIN programmer ON software.PNAME = programmer.PNAME WHERE programmer.SALARY >(SELECT MAX(SALARY) FROM programmer WHERE GENDER = "M") AND programmer.GENDER = "F";

SELECT software.PNAME,COUNT(*) AS CNT FROM software WHERE software.PNAME = (SELECT software.PNAME FROM studies JOIN programmer  ON studies.PNAME = programmer.PNAME WHERE studies.INSTITUTE = "BDPS" ORDER BY DOJ ASC LIMIT 1) GROUP BY software.PNAME;

SELECT software.PNAME,studies.INSTITUTE FROM software JOIN studies ON studies.PNAME = software.PNAME;

SELECT LANG,   (SELECT COUNT(*) FROM programmer WHERE PROF1 = LANG OR PROF2 = LANG) AS programmer_count, (SELECT COUNT(*) FROM software WHERE DEVELOPIN = LANG) AS package_count FROM (SELECT PROF1 AS LANG FROM programmer UNION SELECT PROF2 FROM programmer) AS derived_table ORDER BY LANG;

SELECT programmer.PNAME,COUNT(software.TITLE) FROM programmer JOIN software ON programmer.PNAME = software.PNAME GROUP BY programmer.PNAME;





SELECT language FROM (SELECT PROF1 AS language, PNAME FROM programmer   UNION ALL SELECT PROF2, PNAME FROM programmer  WHERE PROF2 IS NOT NULL) AS AllLangs GROUP BY language HAVING COUNT(*) = 1;

SELECT PNAME FROM programmer WHERE PROF1 = "FOXPRO" OR PROF2 = "FOXPRO";

SELECT COURSE FROM studies WHERE COURSE = (SELECT AVG(PNAME) AS avg FROM studies WHERE COUNT(COURSE)<avg) GROUP BY COURSE;

SELECT PROF1 AS language, PNAME FROM programmer   UNION ALL SELECT PROF2, PNAME FROM programmer  WHERE PROF2 IS NOT NULL;

SELECT PROF1 AS language, PNAME FROM programmer   UNION ALL SELECT PROF2, PNAME FROM programmer  WHERE PROF2 IS NOT NULL;

SELECT language FROM ( SELECT PROF1 AS language, PNAME FROM programmer UNION ALL SELECT PROF2 AS language, PNAME FROM programmer WHERE PROF2 IS NOT NULL) AS AllLangs
GROUP BY PNAME, language
HAVING COUNT(DISTINCT language) = 1;

SELECT language,PNAME, COUNT(*) as PCnt
FROM (
    SELECT  PROF1 AS language, PNAME FROM programmer
    UNION 
    SELECT  PROF2 AS language, PNAME FROM programmer WHERE PROF2 IS NOT NULL
) AS AllLangs
GROUP BY language
HAVING COUNT(DISTINCT PNAME) = 1;

SELECT*FROM programmer;


WITH AllLangs AS (
    SELECT DISTINCT PNAME, PROF1 AS language FROM programmer
    UNION
    SELECT DISTINCT PNAME, PROF2 FROM programmer WHERE PROF2 IS NOT NULL
),
UniqueLangs AS (
    SELECT language
    FROM AllLangs
    GROUP BY language
    HAVING COUNT(DISTINCT PNAME) = 1
)
SELECT DISTINCT a.PNAME
FROM AllLangs a
JOIN UniqueLangs u ON a.language = u.language;


SELECT DISTINCT a.PNAME

FROM (

    SELECT DISTINCT PNAME, PROF1 AS language FROM programmer

    UNION

    SELECT DISTINCT PNAME, PROF2 FROM programmer WHERE PROF2 IS NOT NULL

) AS a

JOIN (
    SELECT language
    FROM (
        SELECT DISTINCT PNAME, PROF1 AS language FROM programmer
        UNION
        SELECT DISTINCT PNAME, PROF2 FROM programmer WHERE PROF2 IS NOT NULL

    ) AS all_langs
    GROUP BY language
    HAVING COUNT(DISTINCT PNAME) = 1
) AS u
ON a.language = u.language;



